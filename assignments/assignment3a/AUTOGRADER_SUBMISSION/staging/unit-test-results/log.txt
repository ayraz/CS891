:app:runUnitTests

********************************************************************************
                                   UNIT TESTS
********************************************************************************

GRADER: Running grader unit test runner version 1.4.62 on project app.
GRADER: Validating required unit test grading components ...
GRADER: Grader unit test components passed all validation tests.
GRADER: SKIPPING Unit test JAR validated.
GRADER: Running 10 test class(es)
WARNING: API 'variant.getJavaCompiler()' is obsolete and has been replaced with 'variant.getJavaCompileProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getJavaCompiler(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getAssemble()' is obsolete and has been replaced with 'variant.getAssembleProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getAssemble(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getExternalNativeBuildTasks()' is obsolete and has been replaced with 'variant.getExternalNativeBuildProviders()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getExternalNativeBuildTasks(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getProcessJavaResources()' is obsolete and has been replaced with 'variant.getProcessJavaResourcesProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getProcessJavaResources(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getJavaCompile()' is obsolete and has been replaced with 'variant.getJavaCompileProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getJavaCompile(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getMergeAssets()' is obsolete and has been replaced with 'variant.getMergeAssetsProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getMergeAssets(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getNdkCompile()' is obsolete and has been replaced with 'variant.getNdkCompileProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getNdkCompile(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getRenderscriptCompile()' is obsolete and has been replaced with 'variant.getRenderscriptCompileProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getRenderscriptCompile(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getAidlCompile()' is obsolete and has been replaced with 'variant.getAidlCompileProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getAidlCompile(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getMergeResources()' is obsolete and has been replaced with 'variant.getMergeResourcesProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getMergeResources(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getGenerateBuildConfig()' is obsolete and has been replaced with 'variant.getGenerateBuildConfigProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getGenerateBuildConfig(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getPreBuild()' is obsolete and has been replaced with 'variant.getPreBuildProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getPreBuild(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getCheckManifest()' is obsolete and has been replaced with 'variant.getCheckManifestProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getCheckManifest(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variantOutput.getInstall()' is obsolete and has been replaced with 'variantOutput.getInstallProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variantOutput.getInstall(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variantOutput.getUninstall()' is obsolete and has been replaced with 'variantOutput.getUninstallProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variantOutput.getUninstall(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
WARNING: API 'variant.getPackageApplication()' is obsolete and has been replaced with 'variant.getPackageApplicationProvider()'.
It will be removed at the end of 2019.
For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
To determine what is calling variant.getPackageApplication(), use -Pandroid.debug.obsoleteApi=true on the command line to display a stack trace.
Android MOCKABLE JAR found: configuration ':app:androidApis'.
GRADER: >>>>>>>>>>>>>>>> subproject project ':app'
GRADER:                  resource dir is [/Users/douglascraigschmidt/Dropbox/POSA/PalantiriSimulator/app/src/test/resources]
GRADER: Starting unit test RUNNER component with parameters:
GRADER: 
GRADER: main: edu.vanderbilt.grader.junit.JUnitRunner
GRADER: args:
GRADER:         /Users/douglascraigschmidt/Dropbox/POSA/PalantiriSimulator/AUTOGRADER_SUBMISSION/staging/unit-test-results
GRADER:         
GRADER:         edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_BeingRunnableTest
GRADER:         edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest
GRADER:         edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest
GRADER:         edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER:         edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER:         edu.vandy.simulator.ReflectionHelper
GRADER:         edu.vandy.simulator.TestHelper
GRADER:         edu.vandy.simulator.Assignment_1B_IntegratedTest
GRADER:         edu.vandy.simulator.TestAllStrategies
GRADER: 
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_BeingRunnableTest)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.ReflectionHelper)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.TestHelper)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.Assignment_1B_IntegratedTest)
GRADER: [JUnitRunner] Class.forName(edu.vandy.simulator.TestAllStrategies)
GRADER: JunitRunner created for UNIT tests ...
GRADER: Test run started.
GRADER: Test testBeingRunGazingSimulationMethodErrorHandling(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_BeingRunnableTest) PASSED.
GRADER: Test testBeingAcquirePalantirAndGazeMethod(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_BeingRunnableTest) PASSED.
GRADER: Test testCreateAndStartWaiterForBeingThreadsMethod(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest) PASSED.
GRADER: Test runSimulationTest(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest) PASSED.
GRADER: Test beginBeingThreadsTest(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest) PASSED.
GRADER: Test makeBeingsTest(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest) PASSED.
GRADER: Test newBeingTest(edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest) PASSED.
GRADER: Test tryLockTest(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest) PASSED.
[MockitoHint] Assignment_1B_SpinLockTest.unlockTest (see javadoc for MockitoHint):
[MockitoHint] 1. Unused -> at edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest.unlockTest(Assignment_1B_SpinLockTest.java:168)

GRADER: Test unlockTest(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest) PASSED.
GRADER: Test lockIsLockedTest(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest) PASSED.
GRADER: Test lockIsUnlockedTest(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest) PASSED.
GRADER: Test lockIsLockedAndThenCancelledTest(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest) PASSED.
GRADER: Test testTryLock(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest) PASSED.
GRADER: Test testLockWhenAlreadyLockedButIsReentrant(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest) PASSED.
GRADER: Test testLockWhenAlreadyLockedWithWaitTestAndThenCancelled(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest) PASSED.
GRADER: Test testLockWhenAlreadyLockedTest(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest) PASSED.
GRADER: Test testLockWhenUnlocked(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest) PASSED.
GRADER: Test testLockWhenAlreadyLockedWithWaitTest(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest) PASSED.
GRADER: Test testUnlock(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest) PASSED.
GRADER: Test testAcquireAllAvailablePalantiri(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Test testReleaseOneAcquiredPalantir(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Test testReleaseNullPalantir(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Test testAcquireWithOnlyOnePalantiriAvailable(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Test buildModelGraduate(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Test testAcquireWithAllPalantiriAvailable(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Test buildModelUndergraduate(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Test testReleaseAllAcquiredPalantiri(edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest) PASSED.
GRADER: Method edu.vandy.simulator.Assignment_1B_IntegratedTest ignored.
GRADER: Method edu.vandy.simulator.TestAllStrategies ignored.
GRADER: Test run finished
GRADER: Test run completed.
GRADER: ********************************************************************************
GRADER:                                UNIT TEST RESULTS
GRADER: ********************************************************************************
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                    Assignment_1B_BeingRunnableTest (2 tests)
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_BeingRunnableTest
GRADER: Method:     testBeingRunGazingSimulationMethodErrorHandling
GRADER: Type:       @Rubric
GRADER: Goal:       This test checks the acquirePalantirAndGaze method for proper error
GRADER:             handling when the method is unable to acquire a Palantir. It also
GRADER:             checks that all the expected method calls are made with the correct
GRADER:             parameters, the correct number of times,and in the correct order.
GRADER: Value:      SimpleBeingRunnable acquirePalantirAndGaze method error test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_BeingRunnableTest
GRADER: Method:     testBeingAcquirePalantirAndGazeMethod
GRADER: Type:       @Rubric
GRADER: Goal:       This test checks for the proper implementation of the
GRADER:             SimpleBeingRunnable's acquirePalantirAndGaze method. It checks that
GRADER:             all the expected method calls are made with the correct parameters,
GRADER:             the correct number of times,and in the correct order.
GRADER: Value:      SimpleBeingRunnable acquirePalantirAndGaze method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                     Assignment_1B_BeingRunnableTest Summary
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:   Assignment_1B_BeingRunnableTest
GRADER: Tests:   2
GRADER: Passed:  2
GRADER: Failed:  0
GRADER: Points:  2
GRADER: Score:   2/2
GRADER: GRADE:   100%
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                  Assignment_1B_RunnableThreadsMgrTest (5 tests)
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest
GRADER: Method:     testCreateAndStartWaiterForBeingThreadsMethod
GRADER: Type:       @Rubric
GRADER: Goal:       This test checks for the proper implementation of the
GRADER:             RunnableThreadsMgr's createAndStartWaiterForBeingThreads method. It
GRADER:             checks that all the expected method calls are made with the correct
GRADER:             parameters, the correct number of times,and in the correct order.
GRADER: Value:      RunnableThreadsMgr createAndStartWaiterForBeingThreads method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest
GRADER: Method:     runSimulationTest
GRADER: Type:       @Rubric
GRADER: Goal:       This test checks for the proper implementation of the
GRADER:             RunnableThreadsMgr's runSimulation method. It checks that all the
GRADER:             expected method calls are made with the correct parameters, the
GRADER:             correct number of times,and in the correct order.
GRADER: Value:      RunnableThreadsMgr runSimulation method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest
GRADER: Method:     beginBeingThreadsTest
GRADER: Type:       @Rubric
GRADER: Goal:       This test checks for the proper implementation of the
GRADER:             RunnableThreadsMgr's beingThreads method. It checks that all the
GRADER:             expected method calls are made with the correct parameters, the
GRADER:             correct number of times,and in the correct order.
GRADER: Value:      RunnableThreadsMgr beingThreads method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest
GRADER: Method:     makeBeingsTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that when the BeingManager
GRADER:             makeBeings method is invoked and repeatedly calls the
GRADER:             RunnableThreadsMgr newBeing method, that the correct number of
GRADER:             unique Being instances are created.5 new beings.
GRADER: Value:      BeingManager makeBeings method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.beings.runnableThreads.Assignment_1B_RunnableThreadsMgrTest
GRADER: Method:     newBeingTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that the newBeing call creates a
GRADER:             new being.
GRADER: Value:      RunnableThreadsManager newBeing method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                   Assignment_1B_RunnableThreadsMgrTest Summary
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:   Assignment_1B_RunnableThreadsMgrTest
GRADER: Tests:   5
GRADER: Passed:  5
GRADER: Failed:  0
GRADER: Points:  5
GRADER: Score:   5/5
GRADER: GRADE:   100%
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                       Assignment_1B_SpinLockTest (5 tests)
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest
GRADER: Method:     tryLockTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that SpinLock's tryLock
GRADER:             methodcalls the correct method the correct number of times.
GRADER: Value:      SpinLock tryLock method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest
GRADER: Method:     unlockTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that SpinLock's unlock
GRADER:             methodcalls the correct method the correct number of times.
GRADER: Value:      SpinLock unlock method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest
GRADER: Method:     lockIsLockedTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that SpinLock's lock method
GRADER:             behaves correctly when the lock is locked. It also ensures that the
GRADER:             correct methods are called with the correct parameters the correct
GRADER:             number of times.
GRADER: Value:      SpinLock lock method test (locked).
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest
GRADER: Method: lockIsUnlockedTest
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockTest
GRADER: Method:     lockIsLockedAndThenCancelledTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that SpinLock's lock method
GRADER:             behaves correctly when the lock is locked and a cancel is
GRADER:             encountered. It also ensures that the correct methods are called
GRADER:             with the correct parameters the correct number of times.
GRADER: Value:      SpinLock lock method test (locked, cancelled).
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                        Assignment_1B_SpinLockTest Summary
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:   Assignment_1B_SpinLockTest
GRADER: Tests:   5
GRADER: Passed:  5
GRADER: Failed:  0
GRADER: Points:  5
GRADER: Score:   5/5
GRADER: GRADE:   100%
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                  Assignment_1B_ReentrantSpinLockTest (7 tests)
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER: Method:     testTryLock
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that ReentrantSpinLock's tryLock
GRADER:             methodcalls the correct method the correct number of times.
GRADER: Value:      ReentrantSpinLock tryLock method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER: Method:     testLockWhenAlreadyLockedButIsReentrant
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that ReentrantSpinLock's lock
GRADER:             method behaves correctly when the lock is unlocked due to it being
GRADER:             reentrant. It also ensures that the correct methods are called with
GRADER:             the correct parameters the correct number of times.
GRADER: Value:      ReentrantSpinLock lock method test (locked but reentrant).
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER: Method:     testLockWhenAlreadyLockedWithWaitTestAndThenCancelled
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that ReentrantSpinLock's lock
GRADER:             method behaves correctly when the lock is locked and not reentrant
GRADER:             and a cancel is received during the wait. It also ensures that the
GRADER:             correct methods are called with the correct parameters the correct
GRADER:             number of times.
GRADER: Value:      ReentrantSpinLock lock method test (locked, not reentrant, spin
GRADER:             wait, cancelled).
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER: Method:     testLockWhenAlreadyLockedTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that ReentrantSpinLock's lock
GRADER:             method behaves correctly when the lock is locked and not reentrant.
GRADER:             It also ensures that the correct methods are called with the correct
GRADER:             parameters the correct number of times.
GRADER: Value:      ReentrantSpinLock lock method test (locked and not reentrant).
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER: Method:     testLockWhenUnlocked
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that ReentrantSpinLock's lock
GRADER:             method behaves correctly when the lock is unlocked. It also ensures
GRADER:             that the correct methods are called with the correct parameters the
GRADER:             correct number of times.
GRADER: Value:      ReentrantSpinLock lock method test (unlocked).
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER: Method:     testLockWhenAlreadyLockedWithWaitTest
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that ReentrantSpinLock's lock
GRADER:             method behaves correctly when the lock is locked and not reentrant
GRADER:             and needs tobe checked more than once. It also ensures that the
GRADER:             correct methods are called with the correct parameters the correct
GRADER:             number of times.
GRADER: Value:      ReentrantSpinLock lock method test (locked, not reentrant, spin
GRADER:             wait).
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:      edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_ReentrantSpinLockTest
GRADER: Method:     testUnlock
GRADER: Type:       @Rubric
GRADER: Goal:       The goal of this test is to ensure that ReentrantSpinLock's unlock
GRADER:             methodcalls the correct method the correct number of times.
GRADER: Value:      ReentrantSpinLock unlock method test.
GRADER: References: @@Unfinished
GRADER: Points:     1
GRADER: Score:      1
GRADER: Status:     PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                   Assignment_1B_ReentrantSpinLockTest Summary
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:   Assignment_1B_ReentrantSpinLockTest
GRADER: Tests:   7
GRADER: Passed:  7
GRADER: Failed:  0
GRADER: Points:  7
GRADER: Score:   7/7
GRADER: GRADE:   100%
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                  Assignment_1B_SpinLockHashMapMgrTest (8 tests)
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: testAcquireAllAvailablePalantiri
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: testReleaseOneAcquiredPalantir
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: testReleaseNullPalantir
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: testAcquireWithOnlyOnePalantiriAvailable
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: buildModelGraduate
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: testAcquireWithAllPalantiriAvailable
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: buildModelUndergraduate
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:  edu.vandy.simulator.managers.palantiri.spinLockHashMap.Assignment_1B_SpinLockHashMapMgrTest
GRADER: Method: testReleaseAllAcquiredPalantiri
GRADER: Type:   @Rubric
GRADER: Points: 1
GRADER: Score:  1
GRADER: Status: PASSED
GRADER: 
GRADER: --------------------------------------------------------------------------------
GRADER:                   Assignment_1B_SpinLockHashMapMgrTest Summary
GRADER: --------------------------------------------------------------------------------
GRADER: 
GRADER: Class:   Assignment_1B_SpinLockHashMapMgrTest
GRADER: Tests:   8
GRADER: Passed:  8
GRADER: Failed:  0
GRADER: Points:  8
GRADER: Score:   8/8
GRADER: GRADE:   100%
GRADER: 
GRADER: ********************************************************************************
GRADER:                                UNIT TEST SUMMARY
GRADER: ********************************************************************************
GRADER: 
GRADER: Type:    UNIT Tests
GRADER: Classes: 5
GRADER: Tests:   27
GRADER: Passed:  27
GRADER: Failed:  0
GRADER: Points:  27
GRADER: Score:   27/27
GRADER: GRADE:   100%
GRADER: 
GRADER: ********************************************************************************
GRADER: 
GRADER: Coping feedback file into the top level submission directory ...
GRADER: Unit tests have completed.


GRADER: Checking integrity of runUnitTests test results ...
GRADER: AutoGrader runUnitTests results successfully verified.


